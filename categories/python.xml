<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Adward-R (Python)</title><link>http://adward-r.lofter.com</link><description></description><atom:link href="http://adward-r.lofter.com/categories/python.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Mon, 15 Feb 2016 07:41:04 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>My Notes of Python 3</title><link>http://adward-r.lofter.com/posts/my-notes-of-python-3.html</link><dc:creator>Adward-R</dc:creator><description>&lt;div&gt;&lt;h3&gt;1. 函数参数&lt;/h3&gt;
&lt;h4&gt;1) 默认参数&lt;/h4&gt;
&lt;p&gt;Python函数在定义的时候，默认参数（比如&lt;code&gt;L&lt;/code&gt;）的值就被计算出来了；每次调用该函数，如果改变了&lt;code&gt;L&lt;/code&gt;的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的值了。所以，定义默认参数时，必须指向不变对象。&lt;/p&gt;
&lt;h3&gt;2. 继承与多态&lt;/h3&gt;
&lt;h4&gt;1) 实例属性与类属性&lt;/h4&gt;
&lt;p&gt;相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。&lt;/p&gt;
&lt;h4&gt;2) 动态语言的鸭子类型&lt;/h4&gt;
&lt;h3&gt;3. 函数式编程&lt;/h3&gt;
&lt;h4&gt;1) 装饰器&lt;/h4&gt;
&lt;p&gt;一个完整的decorator的写法如下：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'call &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;():'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;或者针对带参数的decorator：&lt;/p&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;@log('execute')
def now():
    print('2015-3-25')
&lt;/pre&gt;


&lt;p&gt;效果相当于：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;now = log('execute')(now)
&lt;/pre&gt;


&lt;p&gt;实现：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;():'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;@functools.wraps(func)&lt;/code&gt;的作用之一是&lt;code&gt;wrapper.__name__ = func.__name__&lt;/code&gt; .&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><guid>http://adward-r.lofter.com/posts/my-notes-of-python-3.html</guid><pubDate>Mon, 15 Feb 2016 05:50:27 GMT</pubDate></item><item><title>How to Redirect with Context in Django</title><link>http://adward-r.lofter.com/posts/how-to-redirect-with-context-in-django.html</link><dc:creator>Adward-R</dc:creator><description>&lt;div&gt;&lt;p&gt;The following question on &lt;a href="http://stackoverflow.com/questions/3624422/how-do-i-redirect-in-django-with-context"&gt;StackOverflow&lt;/a&gt; :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have a view that validates and saves a form. After the form is saved, I'd like redirect back to a list_object view with a success message "form for customer &lt;code&gt;xyz&lt;/code&gt; was successfully updated..."&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HttpResponseRedirect&lt;/code&gt; doesn't seem like it would work, because it only has an argument for the url, no way to pass dictionary with it.&lt;/p&gt;
&lt;p&gt;I've tried modifying my wrapper for object_list to take a dict as a parameter that has the necessary context. I the return a call to this wrapper from inside the view that saves the form. However, when the page is rendered, the url is '/customer_form/' rather than '/list_customers/'. I tried modifying the request object, before passing it to the object_list wrapper, but that did not work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://adward-r.lofter.com/posts/how-to-redirect-with-context-in-django.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Django</category><category>Python</category><guid>http://adward-r.lofter.com/posts/how-to-redirect-with-context-in-django.html</guid><pubDate>Wed, 15 Jul 2015 04:21:50 GMT</pubDate></item><item><title>用Django Form做登录出错信息处理的Sample</title><link>http://adward-r.lofter.com/posts/yong-django-formzuo-deng-lu-chu-cuo-xin-xi-chu-li-de-sample.html</link><dc:creator>Adward-R</dc:creator><description>&lt;div&gt;&lt;p&gt;这个学期用基于Python的Django 1.8.2 后端开发框架做了不少活儿，感觉这真是一个为程序员包办各种脏活累活儿的省心Framework :) 使用django.forms提供的API做表单输入的后端验证时遇到了一些坑，大多是因为不了解API的设计哲学所致，基本通过查阅官方文档+搜索StackOverflow解决。这里呈现一个比较通用的登录界面错误信息提示功能的代码片段作为Sample，来归纳一下使用forms时一些需要注意的细节。&lt;/p&gt;
&lt;p&gt;这是一个多APP的教务系统工程，其中登录验证在层次上写到了“基础信息管理子系统（IMS）”中；每个APP都（理应）把自己所辖的URL放到一个固定的前缀下，在顶层的&lt;code&gt;urls.py&lt;/code&gt;中include每个APP的urls，并对应相应的匹配前缀（比如&lt;code&gt;/ims/login/&lt;/code&gt;在顶层被前缀/ims/匹配，在IMS APP中的urls里只要匹配&lt;code&gt;login/&lt;/code&gt;即可）。示例如下：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="c"&gt;#djcode/urls.py&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r'^ims/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'IMS.urls'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;#IMS/urls.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IMS&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;
&lt;span class="c"&gt;#...&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r'^login/$'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggingin&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r'^user_auth/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_auth&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r'^home/$'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;a href="http://adward-r.lofter.com/posts/yong-django-formzuo-deng-lu-chu-cuo-xin-xi-chu-li-de-sample.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Django</category><category>Python</category><guid>http://adward-r.lofter.com/posts/yong-django-formzuo-deng-lu-chu-cuo-xin-xi-chu-li-de-sample.html</guid><pubDate>Sun, 12 Jul 2015 15:18:02 GMT</pubDate></item></channel></rss>